/* 
 * Sprint-pay payment for developper
 *
 * This is a sample doc to use our sprint-pay payment api.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sprint-pay@sprint-pay.com
 * Generated by: https://github.com/SprintPay-api/SprintPay-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SprintPayDateConverter = IO.SprintPay.Client.SprintPayDateConverter;

namespace IO.SprintPay.Model
{
    /// <summary>
    /// PaymentMobileReponse
    /// </summary>
    [DataContract]
    public partial class PaymentMobileReponse :  IEquatable<PaymentMobileReponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMobileReponse" /> class.
        /// </summary>
        /// <param name="TransactionID">TransactionID.</param>
        /// <param name="StatusDesc">StatusDesc.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="RecieverNumber">RecieverNumber.</param>
        /// <param name="SenderNumber">SenderNumber.</param>
        /// <param name="OperationType">OperationType.</param>
        /// <param name="StatusCode">StatusCode.</param>
        /// <param name="OpComment">OpComment.</param>
        /// <param name="ProcessingNumber">ProcessingNumber.</param>
        /// <param name="OperationDate">OperationDate.</param>
        /// <param name="SpMerchand">SpMerchand.</param>
        /// <param name="IdSpMarchand">IdSpMarchand.</param>
        public PaymentMobileReponse(string TransactionID = default(string), string StatusDesc = default(string), string Amount = default(string), string RecieverNumber = default(string), string SenderNumber = default(string), string OperationType = default(string), string StatusCode = default(string), string OpComment = default(string), string ProcessingNumber = default(string), string OperationDate = default(string), string SpMerchand = default(string), string IdSpMarchand = default(string))
        {
            this.TransactionID = TransactionID;
            this.StatusDesc = StatusDesc;
            this.Amount = Amount;
            this.RecieverNumber = RecieverNumber;
            this.SenderNumber = SenderNumber;
            this.OperationType = OperationType;
            this.StatusCode = StatusCode;
            this.OpComment = OpComment;
            this.ProcessingNumber = ProcessingNumber;
            this.OperationDate = OperationDate;
            this.SpMerchand = SpMerchand;
            this.IdSpMarchand = IdSpMarchand;
        }
        
        /// <summary>
        /// Gets or Sets TransactionID
        /// </summary>
        [DataMember(Name="transactionID", EmitDefaultValue=false)]
        public string TransactionID { get; set; }

        /// <summary>
        /// Gets or Sets StatusDesc
        /// </summary>
        [DataMember(Name="statusDesc", EmitDefaultValue=false)]
        public string StatusDesc { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets RecieverNumber
        /// </summary>
        [DataMember(Name="recieverNumber", EmitDefaultValue=false)]
        public string RecieverNumber { get; set; }

        /// <summary>
        /// Gets or Sets SenderNumber
        /// </summary>
        [DataMember(Name="senderNumber", EmitDefaultValue=false)]
        public string SenderNumber { get; set; }

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [DataMember(Name="operationType", EmitDefaultValue=false)]
        public string OperationType { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets OpComment
        /// </summary>
        [DataMember(Name="opComment", EmitDefaultValue=false)]
        public string OpComment { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingNumber
        /// </summary>
        [DataMember(Name="processingNumber", EmitDefaultValue=false)]
        public string ProcessingNumber { get; set; }

        /// <summary>
        /// Gets or Sets OperationDate
        /// </summary>
        [DataMember(Name="operationDate", EmitDefaultValue=false)]
        public string OperationDate { get; set; }

        /// <summary>
        /// Gets or Sets SpMerchand
        /// </summary>
        [DataMember(Name="spMerchand", EmitDefaultValue=false)]
        public string SpMerchand { get; set; }

        /// <summary>
        /// Gets or Sets IdSpMarchand
        /// </summary>
        [DataMember(Name="idSpMarchand", EmitDefaultValue=false)]
        public string IdSpMarchand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMobileReponse {\n");
            sb.Append("  TransactionID: ").Append(TransactionID).Append("\n");
            sb.Append("  StatusDesc: ").Append(StatusDesc).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RecieverNumber: ").Append(RecieverNumber).Append("\n");
            sb.Append("  SenderNumber: ").Append(SenderNumber).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  OpComment: ").Append(OpComment).Append("\n");
            sb.Append("  ProcessingNumber: ").Append(ProcessingNumber).Append("\n");
            sb.Append("  OperationDate: ").Append(OperationDate).Append("\n");
            sb.Append("  SpMerchand: ").Append(SpMerchand).Append("\n");
            sb.Append("  IdSpMarchand: ").Append(IdSpMarchand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMobileReponse);
        }

        /// <summary>
        /// Returns true if PaymentMobileReponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMobileReponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMobileReponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionID == input.TransactionID ||
                    (this.TransactionID != null &&
                    this.TransactionID.Equals(input.TransactionID))
                ) && 
                (
                    this.StatusDesc == input.StatusDesc ||
                    (this.StatusDesc != null &&
                    this.StatusDesc.Equals(input.StatusDesc))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.RecieverNumber == input.RecieverNumber ||
                    (this.RecieverNumber != null &&
                    this.RecieverNumber.Equals(input.RecieverNumber))
                ) && 
                (
                    this.SenderNumber == input.SenderNumber ||
                    (this.SenderNumber != null &&
                    this.SenderNumber.Equals(input.SenderNumber))
                ) && 
                (
                    this.OperationType == input.OperationType ||
                    (this.OperationType != null &&
                    this.OperationType.Equals(input.OperationType))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.OpComment == input.OpComment ||
                    (this.OpComment != null &&
                    this.OpComment.Equals(input.OpComment))
                ) && 
                (
                    this.ProcessingNumber == input.ProcessingNumber ||
                    (this.ProcessingNumber != null &&
                    this.ProcessingNumber.Equals(input.ProcessingNumber))
                ) && 
                (
                    this.OperationDate == input.OperationDate ||
                    (this.OperationDate != null &&
                    this.OperationDate.Equals(input.OperationDate))
                ) && 
                (
                    this.SpMerchand == input.SpMerchand ||
                    (this.SpMerchand != null &&
                    this.SpMerchand.Equals(input.SpMerchand))
                ) && 
                (
                    this.IdSpMarchand == input.IdSpMarchand ||
                    (this.IdSpMarchand != null &&
                    this.IdSpMarchand.Equals(input.IdSpMarchand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionID != null)
                    hashCode = hashCode * 59 + this.TransactionID.GetHashCode();
                if (this.StatusDesc != null)
                    hashCode = hashCode * 59 + this.StatusDesc.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.RecieverNumber != null)
                    hashCode = hashCode * 59 + this.RecieverNumber.GetHashCode();
                if (this.SenderNumber != null)
                    hashCode = hashCode * 59 + this.SenderNumber.GetHashCode();
                if (this.OperationType != null)
                    hashCode = hashCode * 59 + this.OperationType.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.OpComment != null)
                    hashCode = hashCode * 59 + this.OpComment.GetHashCode();
                if (this.ProcessingNumber != null)
                    hashCode = hashCode * 59 + this.ProcessingNumber.GetHashCode();
                if (this.OperationDate != null)
                    hashCode = hashCode * 59 + this.OperationDate.GetHashCode();
                if (this.SpMerchand != null)
                    hashCode = hashCode * 59 + this.SpMerchand.GetHashCode();
                if (this.IdSpMarchand != null)
                    hashCode = hashCode * 59 + this.IdSpMarchand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
