/* 
 * Sprint-pay payment for developper
 *
 * This is a sample doc to use our sprint-pay payment api.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sprint-pay@sprint-pay.com
 * Generated by: https://github.com/SprintPay-api/SprintPay-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SprintPayDateConverter = IO.SprintPay.Client.SprintPayDateConverter;

namespace IO.SprintPay.Model
{
    /// <summary>
    /// PaymentCardReponse
    /// </summary>
    [DataContract]
    public partial class PaymentCardReponse :  IEquatable<PaymentCardReponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCardReponse" /> class.
        /// </summary>
        /// <param name="OrderStatus">OrderStatus.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="InvoiceNumber">InvoiceNumber.</param>
        /// <param name="SpTransactionId">SpTransactionId.</param>
        /// <param name="IdSpMarchand">IdSpMarchand.</param>
        public PaymentCardReponse(string OrderStatus = default(string), string Amount = default(string), string Currency = default(string), string InvoiceNumber = default(string), string SpTransactionId = default(string), string IdSpMarchand = default(string))
        {
            this.OrderStatus = OrderStatus;
            this.Amount = Amount;
            this.Currency = Currency;
            this.InvoiceNumber = InvoiceNumber;
            this.SpTransactionId = SpTransactionId;
            this.IdSpMarchand = IdSpMarchand;
        }
        
        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name="orderStatus", EmitDefaultValue=false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets SpTransactionId
        /// </summary>
        [DataMember(Name="spTransactionId", EmitDefaultValue=false)]
        public string SpTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets IdSpMarchand
        /// </summary>
        [DataMember(Name="idSpMarchand", EmitDefaultValue=false)]
        public string IdSpMarchand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCardReponse {\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  SpTransactionId: ").Append(SpTransactionId).Append("\n");
            sb.Append("  IdSpMarchand: ").Append(IdSpMarchand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCardReponse);
        }

        /// <summary>
        /// Returns true if PaymentCardReponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCardReponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCardReponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.SpTransactionId == input.SpTransactionId ||
                    (this.SpTransactionId != null &&
                    this.SpTransactionId.Equals(input.SpTransactionId))
                ) && 
                (
                    this.IdSpMarchand == input.IdSpMarchand ||
                    (this.IdSpMarchand != null &&
                    this.IdSpMarchand.Equals(input.IdSpMarchand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.SpTransactionId != null)
                    hashCode = hashCode * 59 + this.SpTransactionId.GetHashCode();
                if (this.IdSpMarchand != null)
                    hashCode = hashCode * 59 + this.IdSpMarchand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
