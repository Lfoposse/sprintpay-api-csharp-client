/* 
 * Sprint-pay payment for developper
 *
 * This is a sample doc to use our sprint-pay payment api.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sprint-pay@sprint-pay.com
 * Generated by: https://github.com/SprintPay-api/SprintPay-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.SprintPay.Client;
using IO.SprintPay.Model;

namespace IO.SprintPay.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardPaymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// check the status of card payment request by transaction id 
        /// </summary>
        /// <remarks>
        /// check the status of card payment request using transaction id who are provider in the url of payment
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>PaymentCardReponse</returns>
        PaymentCardReponse CardStatus(List<string> transaction);

        /// <summary>
        /// check the status of card payment request by transaction id 
        /// </summary>
        /// <remarks>
        /// check the status of card payment request using transaction id who are provider in the url of payment
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>ApiResponse of PaymentCardReponse</returns>
        ApiResponse<PaymentCardReponse> CardStatusWithHttpInfo(List<string> transaction);
        /// <summary>
        /// Card payment
        /// </summary>
        /// <remarks>
        /// Make an payment using credit card
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>string</returns>
        string Paymentcard(Card body);

        /// <summary>
        /// Card payment
        /// </summary>
        /// <remarks>
        /// Make an payment using credit card
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PaymentcardWithHttpInfo(Card body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// check the status of card payment request by transaction id 
        /// </summary>
        /// <remarks>
        /// check the status of card payment request using transaction id who are provider in the url of payment
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>Task of PaymentCardReponse</returns>
        System.Threading.Tasks.Task<PaymentCardReponse> CardStatusAsync(List<string> transaction);

        /// <summary>
        /// check the status of card payment request by transaction id 
        /// </summary>
        /// <remarks>
        /// check the status of card payment request using transaction id who are provider in the url of payment
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>Task of ApiResponse (PaymentCardReponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentCardReponse>> CardStatusAsyncWithHttpInfo(List<string> transaction);
        /// <summary>
        /// Card payment
        /// </summary>
        /// <remarks>
        /// Make an payment using credit card
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PaymentcardAsync(Card body);

        /// <summary>
        /// Card payment
        /// </summary>
        /// <remarks>
        /// Make an payment using credit card
        /// </remarks>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PaymentcardAsyncWithHttpInfo(Card body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardPaymentApi : ICardPaymentApi
    {
        private IO.SprintPay.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardPaymentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.SprintPay.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardPaymentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.SprintPay.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.SprintPay.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// check the status of card payment request by transaction id  check the status of card payment request using transaction id who are provider in the url of payment
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>PaymentCardReponse</returns>
        public PaymentCardReponse CardStatus(List<string> transaction)
        {
            ApiResponse<PaymentCardReponse> localVarResponse = CardStatusWithHttpInfo(transaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// check the status of card payment request by transaction id  check the status of card payment request using transaction id who are provider in the url of payment
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>ApiResponse of PaymentCardReponse</returns>
        public ApiResponse<PaymentCardReponse> CardStatusWithHttpInfo(List<string> transaction)
        {
            // verify the required parameter 'transaction' is set
            if (transaction == null)
                throw new ApiException(400, "Missing required parameter 'transaction' when calling CardPaymentApi->CardStatus");

            var localVarPath = "/payement/card/hosted/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = "application/json";

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-type", localVarHttpHeaderAccept);

            if (transaction != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "transaction", transaction)); // query parameter

            // authentication (Datetime) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Datetime")))
            {
                localVarHeaderParams["Datetime"] = Configuration.GetApiKeyWithPrefix("Datetime");
            }
            // authentication (autorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CardStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentCardReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentCardReponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentCardReponse)));
        }

        /// <summary>
        /// check the status of card payment request by transaction id  check the status of card payment request using transaction id who are provider in the url of payment
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>Task of PaymentCardReponse</returns>
        public async System.Threading.Tasks.Task<PaymentCardReponse> CardStatusAsync(List<string> transaction)
        {
            ApiResponse<PaymentCardReponse> localVarResponse = await CardStatusAsyncWithHttpInfo(transaction);
            return localVarResponse.Data;

        }

        /// <summary>
        /// check the status of card payment request by transaction id  check the status of card payment request using transaction id who are provider in the url of payment
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">status of card payment</param>
        /// <returns>Task of ApiResponse (PaymentCardReponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentCardReponse>> CardStatusAsyncWithHttpInfo(List<string> transaction)
        {
            // verify the required parameter 'transaction' is set
            if (transaction == null)
                throw new ApiException(400, "Missing required parameter 'transaction' when calling CardPaymentApi->CardStatus");

            var localVarPath = "/payement/card/hosted/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-type", localVarHttpHeaderAccept);

            if (transaction != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "transaction", transaction)); // query parameter

            // authentication (Datetime) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Datetime")))
            {
                localVarHeaderParams["Datetime"] = Configuration.GetApiKeyWithPrefix("Datetime");
            }
            // authentication (autorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CardStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentCardReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentCardReponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentCardReponse)));
        }

        /// <summary>
        /// Card payment Make an payment using credit card
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>string</returns>
        public string Paymentcard(Card body)
        {
            ApiResponse<string> localVarResponse = PaymentcardWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Card payment Make an payment using credit card
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PaymentcardWithHttpInfo(Card body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardPaymentApi->Paymentcard");

            var localVarPath = "/payement/card/hosted/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-type", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Datetime) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Datetime")))
            {
                localVarHeaderParams["Datetime"] = Configuration.GetApiKeyWithPrefix("Datetime");
            }
            // authentication (autorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Paymentcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Card payment Make an payment using credit card
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PaymentcardAsync(Card body)
        {
            ApiResponse<string> localVarResponse = await PaymentcardAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Card payment Make an payment using credit card
        /// </summary>
        /// <exception cref="IO.SprintPay.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Created card object</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PaymentcardAsyncWithHttpInfo(Card body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardPaymentApi->Paymentcard");

            var localVarPath = "/payement/card/hosted/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Datetime) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Datetime")))
            {
                localVarHeaderParams["Datetime"] = Configuration.GetApiKeyWithPrefix("Datetime");
            }
            // authentication (autorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Paymentcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
